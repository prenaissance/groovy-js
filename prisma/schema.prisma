// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Song {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  year          Int
  genre         Genre
  songUrl       String
  artist        Artist         @relation(fields: [artistId], references: [id])
  artistId      String
  album         Album?         @relation(fields: [albumId], references: [id])
  albumId       String?
  uploadedBy    User           @relation(fields: [uploadedById], references: [id])
  uploadedById  String
  favoriteSongs FavoriteSong[]

  @@unique([artistId, title])
  @@index([artistId, albumId])
  @@index([createdAt(sort: Desc)])
}

model Album {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  title     String
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  imageUrl  String
  year      Int
  genres    Genre[]
  songs     Song[]

  @@unique([artistId, title])
  @@index([artistId])
}

model Artist {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  name      String
  imageUrl  String
  songs     Song[]
  albums    Album[]

  @@unique([name])
}

enum Genre {
  Rock
  Metal
  Pop
  Jazz
  Blues
  Country
  Classical
  Electronic
  Folk
  HipHop
  Rap
  Alternative
  Indie
  Punk
  Other
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favoriteSongs FavoriteSong[]
  uploadedSongs Song[]
}

model FavoriteSong {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  songId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([songId, userId, createdAt(sort: Desc)])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
